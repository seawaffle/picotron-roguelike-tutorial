picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDE4OjM1OjA4Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMiIscmV2aXNpb249NDMyXV1sejQAiAEAADAyAADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTh9LD4A8QxQHKAs
ACxwHEAsQBxwLCAMoBwQDBAMMAwwHAAIAFNADAAMwAQAMRAcIBAAUCAMEBwwKAD-ADxADCAcgBww
HGAcYHzwA3sAHP0F8ARIkBggGHAYQDgwGIAYIAigCCACABKgBAD-DRgQSBAYMAgQCCAIEAhACHAY
UAhQGHAIICiASGB3AB3vAd8bEA6wDhAOIA4gDjAIAAABHAAQTgoAUAAuIB4gCABBDlAeEAgAIGAO
CAD-AqAeEB6QDjAOkA5ALmAOYI4QhAAdH-AxAP--------------ENOvFRDeEN4QLvAQLiDOAgBD
nvAQjgsAEz5PAB8xTwAUw6UQ1RDVECXwECUgxQIAQ5XwEIULAB41TgAP-wAUDzEA------------
------------------------------------tFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDIwOjE2OjM3Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMyJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDE4OjM1OjA4Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMiIscmV2aXNpb249NDE0XV1sejQAmAAAANg_AAD-Dnt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDgwLDUwLCIwAQD-----------------------------------------------------
-----------------------------6rxCCIpLGhpZGRlbj1mYWxzZSxwYW5feD0wCADSeT0wLHRp
bGVfaD0xNgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDIwOjE2OjM3Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDE4OjM1OjA4Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMiIscmV2aXNpb249NDEwXV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDIwOjE2OjM3Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMyJdXQ==
:: entities.lua
--[[pod_format="raw",created="2024-10-08 15:07:00",modified="2025-05-06 20:32:22",revision=579]]
Entity = {}
Entity.__index = Entity
entities = {}

-- constructor for generic entity
function Entity:new(args)
	local o = setmetatable({}, Entity)
	o.x = args.x
	o.y = args.y
	o.sprite = args.sprite or 0
	o.name = args.name or ""
	o.blocksMovement = args.blocksMovement or false
	o.combatant = args.combatant or false
	o.hp = args.hp or 0
	o.maxHp = args.maxHp or o.hp
	o.attack = args.attack or 0
	return o
end

-- ai function to make entities chase the player
function Entity:ai()
	if player and self != player and self.combatant then
		-- give enemies a fov of 7 tiles
		local start = {x=self.x, y=self.y}
		local goal = {x=player.x, y=player.y}
		if insideCircle(start, goal, 7) and isVisible(start, goal) then
			path = find_path(start, goal,
				 manhattan_distance,
				 function () return 1 end,
				 map_neighbors,
				 function (node) return node.y * 8 + node.x end,
				 nil)
         if path then
         	local p = path[count(path) - 1]
         	-- do a check to see if a blocking entity that isn't the player
         	-- is there, we don't want our enemies killing each other
         	local e = getEntity(p.x, p.y, true)
         	if e and e != player then
         		return
         	end
         	local dX = p.x - self.x
         	local dY = p.y - self.y
         	self:move(dX, dY)
			end
		end		
	end
end

-- generic move function for entity
function Entity:move(dx, dy)
	local destX = self.x + dx
	local destY = self.y + dy
	if getEntity(destX, destY, true) then
		self:melee(destX, destY)
	elseif isWalkable(destX, destY) then
		self.x = destX
		self.y = destY
	end
	if player then
		currentState = State.ENEMY_TURN
	end
end

-- generic melee attack for entity
function Entity:melee(x, y)
	target = getEntity(x, y, true)
	if target.combatant and target.hp > 0 then
		target.hp = target.hp - self.attack
		local c = 7
		if self != player then
			c = 9
		end
		log("\f" .. c .. self.name .. " attacks " .. target.name .. " for " .. self.attack .. " damage.\f7")
		if target.hp <= 0 then
			log("\f8" .. self.name .. " kills " .. target.name .. "!\f7")
			del(entities, target)
		end
	end
end

-- generic draw function for entity
function Entity:draw()
	spr(self.sprite, self.x*16, self.y*16)
end

-- return an entity at the given coords
-- setting onlyBlockers to true only returns blocking entities
function getEntity(x, y, onlyBlockers)
	for entity in all(entities) do
		if entity.x == x and entity.y == y then
			if onlyBlockers then
				if not entity.blocksMovement then
					break
				end
			end
			return entity
		end
	end
end

-- find a random walkable tile for an entity
function findEmptySpot()
	while true do
		local posX = generateRandomNumber(0, mapWidth)
		local posY = generateRandomNumber(0, mapHeight)
		local index = (posY * mapWidth) + posX
		if mapTiles[index] == floor then
			return posX, posY
		end
	end
end
:: fov.lua
--[[pod_format="raw",created="2024-10-16 15:21:54",modified="2025-05-06 20:32:22",revision=229]]
visible = {}
seen = {}

visionRadius = 8

function updateFOV()
	for y = 0, mapHeight do
		for x = 0, mapWidth do
			local tile = {x=x, y=y}
			local index = (y * mapWidth) + x
			if insideCircle(player, tile, visionRadius) then
				if isVisible(player, tile) then
					visible[index] = true
					seen[index] = true
				else
					visible[index] = false
				end
			else
				visible[index] = false
			end			
		end
	end
end

function insideCircle(center, tile, radius)
	local dx = center.x - tile.x
	local dy = center.y - tile.y
	local distanceSquared = (dx * dx) + (dy * dy)
	return distanceSquared <= (radius * radius)
end

-- bresenham algorithm taken from https://github.com/rm-code/bresenham
function isVisible(src, dest)
	local dx = abs(dest.x - src.x)
	local dy = abs(dest.y - src.y) * -1
	local sx = src.x < dest.x and 1 or -1
	local sy = src.y < dest.y and 1 or -1
	local err = dx + dy
	
	local x = src.x
	local y = src.y
	while true do
		if x == dest.x and y == dest.y then
			return true
		end
		if not isWalkable(x, y) then
			return false
		end
		local tmpErr = 2 * err
		if tmpErr > dy then
			err = err + dy
			x = x + sx
		end
		if tmpErr < dx then
			err = err + dx
			y = y + sy
		end
	end
end













:: logger.lua
--[[pod_format="raw",created="2025-05-04 21:30:46",modified="2025-05-06 20:32:22",revision=63]]
logs = {}

function log(message)
	add(logs, message)
end

function mostRecentLogs(amount)
	local index = count(logs)
	local recentLogs = {}
	while (amount > 0) do
		if index > 0 then
			add(recentLogs, logs[index])
		end
		amount = amount - 1
		index = index - 1
	end
	return recentLogs
end
:: main.lua
--[[pod_format="raw",created="2024-10-07 18:35:08",modified="2025-05-06 20:32:22",revision=649]]
include "utilities.lua"
include "logger.lua"
include "entities.lua"
include "mapgen.lua"
include "fov.lua"
include "pathing.lua"

mapWidth = 80
mapHeight = 50
State = {PLAYER_TURN = "1", ENEMY_TURN = "2", GAME_OVER = "3",
	LOG_VIEW = "4", EXAMINE = "5"}

function _init()
	currentState = State.PLAYER_TURN
	populateMap()
	log("Welcome to the dungeon!")
end

function _update()
	if currentState == State.PLAYER_TURN then
		if player.hp <=0 then
			currentState = State.GAME_OVER
			return
		end
		if btnp(0) then
			player:move(-1, 0)
		elseif btnp(1) then
			player:move(1, 0)
		elseif btnp(2) then
			player:move(0, -1)
		elseif btnp(3) then
			player:move(0, 1)
		elseif btnp(4) then
			logIndex = 0
			currentState = State.LOG_VIEW
		elseif btnp(5) then
			examineCursor = {x=player.x, y=player.y}
			currentState = State.EXAMINE
		end
		updateFOV()
		updateMap()
	elseif currentState == State.ENEMY_TURN then
		updateEntities()
		currentState = State.PLAYER_TURN
	elseif currentState == State.GAME_OVER then
		if btnp(5) then
			currentState = State.PLAYER_TURN
			entities = {}
			populateMap()
			logs = {}
			log("Welcome back to the dungeon!")
		end
	elseif currentState == State.LOG_VIEW then
		if btnp(4) then
			currentState = State.PLAYER_TURN
		elseif btnp(2) then
			if logIndex > 0 then
				logIndex = logIndex - 1
			end
		elseif btnp(3) then
			if logIndex < count(logs) then
				logIndex = logIndex + 1
			end
		end
	elseif currentState == State.EXAMINE then
		if btnp(5) then
			currentState = State.PLAYER_TURN
		elseif btnp(0) then
			examineCursor.x = examineCursor.x - 1
		elseif btnp(1) then
			examineCursor.x = examineCursor.x + 1
		elseif btnp(2) then
			examineCursor.y = examineCursor.y - 1
		elseif btnp(3) then
			examineCursor.y = examineCursor.y + 1
		end
	end
end

function updateEntities()
	for entity in all(entities) do
		entity:ai()
	end
end

function updateMap()
	for y = 0, mapHeight do
		for x = 0, mapWidth do
			local tile = floor
			local index = (y * mapWidth) + x
			if mapTiles[index] == wall then
				if visible[index] then
					tile = wall
				elseif seen[index] then
					tile = seenWall
				end
			end
			mset(x, y, tile)
		end
	end
end

function _draw()
	cls()
	clip(0, 0, 380, 200)
	camera(player.x*16 - 11*16, player.y*16 - 6*16)
	map()
	drawEntities()
	if currentState == State.EXAMINE then
		-- draw a white square around the tile at the cursor
		rect(examineCursor.x * 16, examineCursor.y * 16,
			(examineCursor.x + 1) * 16, (examineCursor.y + 1) * 16, 7)
		-- look for entities at the examine cursor
		local target = getEntity(examineCursor.x, examineCursor.y)
		if target then
			print(target.name, (examineCursor.x + 1.5) * 16, (examineCursor.y + 0.25) * 16)
		end
	end
	drawInterface()
end

function drawEntities()
	for entity in all(entities) do
		if entity == player or (insideCircle(player, entity, visionRadius) and isVisible(player, entity)) then
			entity:draw()
		end
	end
end

function drawInterface()
	clip()
	camera()
	drawSideUI()
	drawBottomUI()
	drawWindows()
end

function drawSideUI()
	rectfill(382, 2, 478, 198, 1)
	rect(382, 2, 478, 198, 7)
	cursor(386, 6)
	print(player.name)
	print("HP: " .. player.hp .. "/" .. player.maxHp)
	print("Attack: " .. player.attack)
end

function drawBottomUI()
	rectfill(0, 200, 478, 268, 1)
	rect(0, 200, 478, 268, 7)
	cursor(4, 204)
	local logData = mostRecentLogs(5)
	for log in all(logData) do
		print(log)
	end
end

function drawWindows()
	if currentState == State.GAME_OVER then
		drawGameOver()
	elseif currentState == State.LOG_VIEW then
		drawLogView()
	end
end

function drawGameOver()
	clip()
	camera()
	rectfill(20, 50, 460, 220, 1)
	rect(20, 50, 460, 220, 7)
	cursor(200, 80)
	print("You Died")
	print("Press X to restart")
end

function drawLogView()
	clip()
	camera()
	rectfill(20, 50, 460, 220, 1)
	rect(20, 50, 460, 220, 7)
	cursor(24, 54)
	-- starting at logIndex, display 15 messages
	for i=1,15 do
		local currentIndex = logIndex + i
		if currentIndex <= count(logs) then
			print(logs[currentIndex])
		end
	end
end
:: mapgen.lua
--[[pod_format="raw",created="2024-10-08 16:51:54",modified="2025-05-06 20:32:22",revision=510]]
maxRooms = 15
minSize = 6
maxSize = 10
maxEnemiesPerRoom = 2

floor = 0
wall = 63
seenWall = 62

mapTiles = {}

RectRoom = {}
RectRoom.__index = RectRoom

-- constructor for RectRoom
function RectRoom:new(x, y, width, height)
	local o = setmetatable({}, RectRoom)
	o.x1 = x
	o.y1 = y
	o.x2 = x + width
	o.y2 = y + height
	o.width = width
	o.height = height
	return o
end

-- are these coordinates in this room?
function RectRoom:inRoom(x, y)
	local inside = false
	if x >= self.x1 + 1 and x < self.x2 then
		if y >= self.y1 + 1 and y < self.y2 then
			inside = true
		end
	end
	return inside
end

-- give us the center coordinates for the room
function RectRoom:center()
	local center = {
	 x = self.x1 + flr(self.width / 2),
	 y = self.y1 + flr(self.height / 2),
	}
	return center
end

-- do these two rooms intersect?
function RectRoom:intersects(other)
	return self.x1 <= other.x2 and self.x2 >= other.x1 and self.y1 <= other.y2 and self.y2 >=other.y1
end

-- tunnel between two rooms
function tunnelBetween(room1, room2)
	-- set the start point at the center of the first room
	local current = room1:center()
	-- set the end point at the center of the second room
	local finish = room2:center()
	
	-- randomly pick if we're going horizontal or vertical
	local horizontal =  rnd() < 0.5
	local axis = horizontal and "x" or "y"

	-- loop until we reach the end point
	while current.x != finish.x or current.y != finish.y do
		local direction = 0
		local diff = finish[axis] - current[axis]
		if diff > 0 then
			direction = 1
		elseif diff < 0 then
			direction = -1
		end
		if direction != 0 then
			current[axis] += direction
			yield(current)
		else
			axis = axis == "x" and "y" or "x"
			yield(current)
		end
	end
end

-- generate a random map
function populateMap()
	-- generate a random amount of rooms
	local rooms = {}
	for count = 0, maxRooms do
		local width = generateRandomNumber(minSize, maxSize)
		local height = generateRandomNumber(minSize, maxSize)
		local posX = generateRandomNumber(0, mapWidth - width - 1)
		local posY = generateRandomNumber(0, mapHeight - height - 1)
		
		local room = RectRoom:new(posX, posY, width, height)
		local good = true
		-- if the room intersects with another, we're going to toss
		-- it out and keep going
		for otherRoom in all(rooms) do
			if otherRoom:intersects(room) then
				good = false
			end
		end
		if good then
			add(rooms, room)
			-- place player in the first room, enemies can be in any of the others
			if count == 0 then
				local x = generateRandomNumber(posX+1, posX + width)
				local y = generateRandomNumber(posY+1, posY + height)
				placePlayer(x, y)
			else
				-- use this instead of generateRandomNumber function because it is inclusive
				local enemyCount = flr(rnd(maxEnemiesPerRoom + 1))
				while (enemyCount > 0) do
					local x = generateRandomNumber(posX+1, posX + width)
					local y = generateRandomNumber(posY+1, posY + height)
					placeEnemy(x, y)		
					enemyCount = enemyCount - 1
				end
			end
		end
	end
	-- fill all map tiles with wall, except for tiles that are in a room
	for y = 0, mapHeight do
		for x = 0, mapWidth do
			local tile = wall
			local index = (y * mapWidth) + x
			for room in all(rooms) do
				if room:inRoom(x, y) then
					tile = floor
				end
			end
			mapTiles[index] = tile
		end
	end
	-- tunnel between all rooms
	for index = 1, count(rooms) - 1 do
		local room1 = rooms[index]
		local room2 = rooms[index + 1]
		tunnel = cocreate(tunnelBetween)
		while costatus(tunnel) != "dead" do
			local status, curr = coresume(tunnel, room1, room2)
			if costatus(tunnel) != "dead" then
				local index = (curr.y * mapWidth) + curr.x
				mapTiles[index] = floor
			end
		end
	end
end

function placePlayer(x, y)
	player = Entity:new({
		x=x, y=y, sprite=1, name="Player", 
		blocksMovement=true, combatant=true, 
		hp=20, attack=2})
	add(entities, player)
end

function placeEnemy(x, y)
	-- check to avoid placing enemies on top of each other
	for entity in all(entities) do
		if entity.x == x and entity.y == y then
			return
		end
	end
	local name = "Red Enemy"
	local sprite = 2
	local hp = 10
	local attack = 1
	if rnd() > 0.75 then
		name = "Green Enemy"
		sprite = 3
		hp = 15
		attack = 2
	end
	local enemy = Entity:new({
		x=x, y=y, sprite=sprite, name=name, 
		blocksMovement=true, combatant=true,
		hp=hp, attack=attack})
	add(entities, enemy)
end
:: pathing.lua
--[[pod_format="raw",created="2025-05-04 17:18:25",modified="2025-05-06 20:32:22",revision=113]]
-- largely taken from the following implementations:
-- https://github.com/morgan3d/misc/tree/master/p8pathfinder
function find_path
(start,
 goal,
 estimate,
 edge_cost,
 neighbors, 
 node_to_id, 
 graph)
 
 -- the final step in the
 -- current shortest path
 local shortest, 
 -- maps each node to the step
 -- on the best known path to
 -- that node
 best_table = {
  last = start,
  cost_from_start = 0,
  cost_to_goal = estimate(start, goal, graph)
 }, {}

 best_table[node_to_id(start, graph)] = shortest

 -- array of frontier paths each
 -- represented by their last
 -- step, used as a priority
 -- queue. elements past
 -- frontier_len are ignored
 local frontier, frontier_len, goal_id, max_number = {shortest}, 1, node_to_id(goal, graph), 32767.99

 -- while there are frontier paths
 while frontier_len > 0 do

  -- find and extract the shortest path
  local cost, index_of_min = max_number
  for i = 1, frontier_len do
   local temp = frontier[i].cost_from_start + frontier[i].cost_to_goal
   if (temp <= cost) index_of_min,cost = i,temp
  end
 
  -- efficiently remove the path 
  -- with min_index from the
  -- frontier path set
  shortest = frontier[index_of_min]
  frontier[index_of_min], shortest.dead = frontier[frontier_len], true
  frontier_len -= 1

  -- last node on the currently
  -- shortest path
  local p = shortest.last
  
  if node_to_id(p, graph) == goal_id then
   -- we're done.  generate the
   -- path to the goal by
   -- retracing steps. reuse
   -- 'p' as the path
   p = {goal}

   while shortest.prev do
    shortest = best_table[node_to_id(shortest.prev, graph)]
    add(p, shortest.last)
   end

   -- we've found the shortest path
   return p
  end -- if

  -- consider each neighbor n of
  -- p which is still in the
  -- frontier queue
  for n in all(neighbors(p, graph)) do
   -- find the current-best
   -- known way to n (or
   -- create it, if there isn't
   -- one)
   local id = node_to_id(n, graph)
   local old_best, new_cost_from_start =
    best_table[id],
    shortest.cost_from_start + edge_cost(p, n, graph)
   
   if not old_best then
    -- create an expensive
    -- dummy path step whose
    -- cost_from_start will
    -- immediately be
    -- overwritten
    old_best = {
     last = n,
     cost_from_start = max_number,
     cost_to_goal = estimate(n, goal, graph)
    }

    -- insert into queue
    frontier_len += 1
    frontier[frontier_len], best_table[id] = old_best, old_best
   end -- if old_best was nil

   -- have we discovered a new
   -- best way to n?
   if not old_best.dead and old_best.cost_from_start > new_cost_from_start then
    -- update the step at this
    -- node
    old_best.cost_from_start, old_best.prev = new_cost_from_start, p
   end -- if
  end -- for each neighbor
  
 end -- while frontier not empty

 -- unreachable, so implicitly
 -- return nil
end

function map_neighbors(node, graph)
 local neighbors = {}
 if isWalkable(node.x, node.y - 1) then 
 	add(neighbors, {x=node.x, y=node.y - 1})
 end
 if isWalkable(node.x, node.y + 1) then 
 	add(neighbors, {x=node.x, y=node.y + 1})
 end
 if isWalkable(node.x - 1, node.y) then 
 	add(neighbors, {x=node.x - 1, y=node.y})
 end
 if isWalkable(node.x + 1, node.y) then 
 	add(neighbors, {x=node.x + 1, y=node.y})
 end
 return neighbors
end

-- estimates the cost from a to
-- b by assuming that the graph
-- is a regular grid and all
-- steps cost 1.
function manhattan_distance(a, b)
 return abs(a.x - b.x) + abs(a.y - b.y)
end

:: utilities.lua
--[[pod_format="raw",created="2024-10-08 17:52:38",modified="2025-05-06 20:32:22",revision=370]]
-- is the given map coordinate walkable?
function isWalkable(x, y)
	local t = mget(x, y)
	return not fget(t, 0)
end

-- give us a random integer between two values
function generateRandomNumber(minSize, maxSize)
	return flr(rnd(maxSize - minSize) + minSize)
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA3IDIwOjE2OjM3Iixtb2RpZmllZD0iMjAyNS0w
NS0wNiAyMDozMjoyMyIscnVudGltZT0xNyx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzkxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJsb2dnZXIubHVhIzEiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249ImVudGl0aWVzLmx1YSM0MiIsd29ya3NwYWNlX2luZGV4PTF9
LHtsb2NhdGlvbj0ibWFwZ2VuLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJw
YXRoaW5nLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJmb3YubHVhIzMzIix3
b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ1dGlsaXRpZXMubHVhIzEiLHdvcmtzcGFjZV9p
bmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlv
bj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdv
cmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
